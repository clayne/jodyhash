This is Jody Bruchon's hashing function and a very simple command-line tool
to produce hexadecimal hash strings (and also to show how to use jody_hash).
It can be built to produce 64-bit, 32-bit, and 16-bit hash variants. When
building, the default is 64-bit, but can be overridden like so:

make CFLAGS_EXTRA=-DJODY_HASH_WIDTH=32

This will generate a 32-bit width version of the program. Obviously, the
different widths are incompatible with each other. The program will tell
you what bit width it was built for when invoked with the -v option.

If you wish to plug jodyhash into any place where md5sum, sha1sum, and
friends are already used, there is a basic compatibility option '-s' that
will print hashes plus file names with a leading asterisk. Remember that
jodyhash is not a "secure hash function" so don't use it as a signature
mechanism for authenticating anything!

How does jodyhash compare to other non-cryptographic hashes like xxHash?
Simple: it's faster! Here's an example benchmark of 64-bit jodyhash and
the 32-bit and 64-bit variants of xxHash:

$ dd if=/dev/zero bs=32768 count=262144 | jodyhash -
8589934592 bytes (8.6 GB) copied, 4.95873 s, 1.7 GB/s
$ dd if=/dev/zero bs=32768 count=262144 | xxh64sum -
8589934592 bytes (8.6 GB) copied, 5.14096 s, 1.7 GB/s
$ dd if=/dev/zero bs=32768 count=262144 | xxh32sum -
8589934592 bytes (8.6 GB) copied, 5.33448 s, 1.6 GB/s

Yes, it's only 3.52% faster than xxHash64, but I'll take what I can get.

The home page for this program is:
https://github.com/jbruchon/jodyhash

If you find this useful, send me an email to jody@jodybruchon.com :-)
